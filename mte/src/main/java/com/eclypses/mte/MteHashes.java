// Copyright (c) Eclypses, Inc.
// 
// All rights reserved.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// WARNING: This file is automatically generated. Do not edit.

package com.eclypses.mte;

import java.util.Map;
import java.util.HashMap;

// Hash algorithms.
public enum MteHashes
{
  // None. An external hash may be provided instead.
  mte_hashes_none,

  // CRC-32
  mte_hashes_crc32,

  // SHA-1
  mte_hashes_sha1,

  // SHA-256
  mte_hashes_sha256,

  // SHA-512
  mte_hashes_sha512;

  // Enum <-> Integer conversion.
  public int getValue() { return ordinal(); }
  public static MteHashes valueOf(int i) { return map.get(i); }
  private static final Map<Integer, MteHashes> map =
    new HashMap<>();
  static
  {
    for (MteHashes e : MteHashes.values())
    {
      map.put(e.getValue(), e);
    }
  }
} 



