// Copyright (c) Eclypses, Inc.
// 
// All rights reserved.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// WARNING: This file is automatically generated. Do not edit.

package com.eclypses.mte;

import java.util.Map;
import java.util.HashMap;

// Deterministic Random Bit Generator algorithms.
public enum MteDrbgs
{
  // None. An external DRBG must be provided instead.
  mte_drbgs_none,

  // Increment. The next "random" number is one more than the previous.
  // This provides no security and is meant for testing only.
  mte_drbgs_increment,

  // NIST CTR DRBG using AES-128 with derivation function.
  mte_drbgs_ctr_aes128_df,

  // NIST CTR DRBG using AES-128 with no derivation function.
  mte_drbgs_ctr_aes128_nodf,

  // NIST CTR DRBG using AES-192 with derivation function.
  mte_drbgs_ctr_aes192_df,

  // NIST CTR DRBG using AES-192 with no derivation function.
  mte_drbgs_ctr_aes192_nodf,

  // NIST CTR DRBG using AES-256 with derivation function.
  mte_drbgs_ctr_aes256_df,

  // NIST CTR DRBG using AES-256 with no derivation function.
  mte_drbgs_ctr_aes256_nodf,

  // NIST Hash DRBG using SHA-1.
  mte_drbgs_hash_sha1,

  // NIST Hash DRBG using SHA-256.
  mte_drbgs_hash_sha256,

  // NIST Hash DRBG using SHA-512.
  mte_drbgs_hash_sha512;

  // Enum <-> Integer conversion.
  public int getValue() { return ordinal(); }
  public static MteDrbgs valueOf(int i) { return map.get(i); }
  private static final Map<Integer, MteDrbgs> map =
    new HashMap<>();
  static
  {
    for (MteDrbgs e : MteDrbgs.values())
    {
      map.put(e.getValue(), e);
    }
  }
} 



