// Copyright (c) Eclypses, Inc.
// 
// All rights reserved.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// WARNING: This file is automatically generated. Do not edit.

package com.eclypses.mte;

import java.util.Map;
import java.util.HashMap;

// Init info requests.
public enum MteInitInfo
{
  // ARM64: is the AES extension present? Return 0 if not or non-zero if
  //        it is. This is only requested if it wasn't able to be
  //        determined automatically.
  mte_init_info_arm64_aes_paa,

  // ARM64: is the SHA-1 extension present? Return 0 if not or non-zero
  //        if it is. This is only requested if it wasn't able to be
  //        determined automatically.
  mte_init_info_arm64_sha1_paa,

  // ARM64: is the SHA-256 extension present? Return 0 if not or non-zero
  //        if it is. This is only requested if it wasn't able to be
  //        determined automatically.
  mte_init_info_arm64_sha256_paa,

  // ARM64: is the SHA-512 extension present? Return 0 if not or non-zero
  //        if it is. This is only requested if it wasn't able to be
  //        determined automatically.
  mte_init_info_arm64_sha512_paa,

  // ARM64: is the CRC-32 extension present? Return 0 if not or non-zero
  //        if it is. This is only requested if it wasn't able to be
  //        determined automatically.
  mte_init_info_arm64_crc32_paa;

  // Enum <-> Integer conversion.
  public int getValue() { return ordinal(); }
  public static MteInitInfo valueOf(int i) { return map.get(i); }
  private static final Map<Integer, MteInitInfo> map =
    new HashMap<>();
  static
  {
    for (MteInitInfo e : MteInitInfo.values())
    {
      map.put(e.getValue(), e);
    }
  }
} 



